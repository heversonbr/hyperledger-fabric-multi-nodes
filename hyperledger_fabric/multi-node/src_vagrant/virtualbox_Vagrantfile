# -*- mode: ruby -*-
# vi: set ft=ruby :

#os.networks = 'd085327f-2cea-4e14-8784-764ee72b92f4'  # id network hbr_net_test2  (hyper)
#os.networks = '2a7f5866-ded3-45ea-b263-5826a997de2a'  # id network hbr_net_test1  (k8s)
#os.networks = '0ed56125-8083-4fd8-9c46-4e4e29ce50f6'  # id network hbr_net_test3  (gluster)  

#types for hyperledger:   MSP(CA) , peer , endorser-peer , ordering-node

cluster = [
    {
        :name => "hl-admin",
        :username => "ubuntu",
        :type => "msp",
        :box => "ubuntu/xenial64",
        :box_version => "20190731.0.0",
        :eth1 => "192.168.1.10",
        :mem => "2048",
        :cpu => "1"
       
    }
]

# initialization scripts

#$setHostsDNS = <<-SCRIPT
#    echo "-------------------------------------------"
#    echo "Setting /etc/hosts and /etc/resolv.conf at node `hostname`"
#    echo '127.0.0.1 #{opts[:name]}' | tee -a /etc/hosts
#    echo 'nameserver 8.8.8.8'       | tee -a /etc/resolv.conf
#    echo "-------------------------------------------"
#SCRIPT

$setSSHconfig = <<-SCRIPT
    echo "-------------------------------------------"
    echo "allNodes script started"
    # setup ~/.ssh/config file at all the nodes to allow connection among them. 
    # (after deployment only the floating IP of the first vm is required to connect)
    echo "Setting ~/.ssh/config file"
    mv /home/ubuntu/hyperledger_ws/config_files/ssh_config_template /home/ubuntu/.ssh/config
    mv /home/ubuntu/hyperledger_ws/install/openstack_cloudlab_bcom.key /home/ubuntu/.ssh/openstack_cloudlab_bcom.key
    chown ubuntu:ubuntu /home/ubuntu/.ssh/config /home/ubuntu/.ssh/openstack_cloudlab_bcom.key
    echo "-------------------------------------------"
SCRIPT

$installDocker = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Installing Docker at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_01_docker.sh'
    echo "-------------------------------------------"
SCRIPT

$installprereqs = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Installing FABRIC prereqs at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_02_prereqs.sh'
    echo "-------------------------------------------"
SCRIPT

$checkprereqs = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Checking FABRIC prereqs at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/check_prereqs.sh'
    echo "-------------------------------------------"
SCRIPT

$bootstrapBinaries = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Bootstraping Fabric binaries at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_03_bootstrap.sh'
    echo "-------------------------------------------"
SCRIPT

$installMSP = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Installing CA (client/server) at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_04_ca_server.sh'
    echo "-------------------------------------------"
SCRIPT

$prepareOrderer = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Preparing Orderer node at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/setup_scripts/prepare_orderer.sh'
    echo "-------------------------------------------"
SCRIPT

# example that should work correctly (to be adapted)
#Vagrant.configure("2") do |config|
#
#    servers.each do |opts|
#        config.vm.define opts[:name] do |config|

#            config.vm.box = opts[:box]
#            config.vm.box_version = opts[:box_version]
#            config.vm.hostname = opts[:name]
#            config.vm.network :private_network, ip: opts[:eth1]
#
#            config.vm.provider "virtualbox" do |v|
#                v.name = opts[:name]
#                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
#                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
#            end
#
#            config.vm.provision "shell", inline: $configureBox
#            if opts[:type] == "master"
#                config.vm.provision "shell", inline: $configureMaster
#            else
#                config.vm.provision "shell", inline: $configureNode
#            end
#        end
#    end
#end 

Vagrant.configure("2") do |config|
    #config.ssh.username = "ubuntu"
    #config.ssh.password = 'password'
    #config.ssh.config = "~/.ssh/config"
    #config.ssh.private_key_path = "~/.ssh/id_rsa_LAP-042"

    cluster.each do |opts|
        config.vm.define opts[:name] do |node| 
            node.vm.box = opts[:box]
            node.vm.box_version = opts[:box_version]
            node.vm.hostname = opts[:name]
            node.vm.network :private_network, ip: opts[:eth1]

            node.vm.synced_folder '.', '/vagrant', disabled: true
            node.vm.synced_folder './shared', '/home/vagrant/hyperledger_ws/', type: 'rsync'

            node.vm.provider "virtualbox" do |v|
                v.gui = false
                v.name = opts[:name]
                v.customize ["modifyvm", :id, "--memory", opts[:mem]]
                v.customize ["modifyvm", :id, "--cpus", opts[:cpu]]
            end
            
            # for all:
            node.vm.provision "shell", inline: <<-SHELL
                echo "-------------------------------------------"
                echo "Setting /etc/hosts and /etc/resolv.conf at node `hostname`"
                echo '127.0.0.1 #{opts[:name]}' | tee -a /etc/hosts
                echo 'nameserver 8.8.8.8'       | tee -a /etc/resolv.conf
                echo "-------------------------------------------"
            SHELL
            #node.vm.provision "shell", inline: $setSSHconfig
            #node.vm.provision "shell", inline: $installprereqs
            #node.vm.provision "shell", inline: $checkprereqs
            #node.vm.provision "shell", inline: $bootstrapBinaries
            #
            ## for msp only
            #if opts[:type] == "msp"
            #    node.vm.provision "shell", inline: $installMSP
            #end
#
            #if opts[:type] == "orderer"
            #    node.vm.provision "shell", inline: $prepareOrderer
            #end
        end 
    end
end 