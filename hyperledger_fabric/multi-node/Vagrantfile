# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'vagrant-openstack-provider'


#os.networks = 'd085327f-2cea-4e14-8784-764ee72b92f4'  # id network hbr_net_test2  (hyper)
#os.networks = '2a7f5866-ded3-45ea-b263-5826a997de2a'  # id network hbr_net_test1  (k8s)
#os.networks = '0ed56125-8083-4fd8-9c46-4e4e29ce50f6'  # id network hbr_net_test3  (gluster)  

#types for hyperledger:   MSP(CA) , peer , endorser-peer , ordering-node

cluster = [
    {
        :name => "ca-admin",
        :username => "ubuntu",
        :type => "caserver",
        :box => "hbr_ubuntu1604_img",
        :flavor => "j1.medium",
        :netid => "d085327f-2cea-4e14-8784-764ee72b92f4",
        :netadd => "192.168.1.10",
        :privkeyfile => "~/.ssh/openstack_cloudlab_bcom.key"  
    },
    {
        :name => "org1-msp-1",
        :username => "ubuntu",
        :type => "msp",
        :box => "hbr_ubuntu1604_img",
        :flavor => "j1.small",
        :netid =>  "d085327f-2cea-4e14-8784-764ee72b92f4",
        :netadd => "192.168.1.11",
        :privkeyfile => "~/.ssh/openstack_cloudlab_bcom.key"
    },
    {
        :name => "org2-msp-2",
        :username => "ubuntu",
        :type => "msp",
        :box => "hbr_ubuntu1604_img",
        :flavor => "j1.small",
        :netid =>  "d085327f-2cea-4e14-8784-764ee72b92f4",
        :netadd => "192.168.1.12",
        :privkeyfile => "~/.ssh/openstack_cloudlab_bcom.key"
     },
      {
        :name => "ordering-0",
        :username => "ubuntu",
        :type => "orderer",
        :box => "hbr_ubuntu1604_img",
        :flavor => "j1.small",
        :netid =>  "d085327f-2cea-4e14-8784-764ee72b92f4",
        :netadd => "192.168.1.13",
        :privkeyfile => "~/.ssh/openstack_cloudlab_bcom.key"
       }#,
    #{
    #    :name => "msp-0",
    #    :username => "ubuntu",
    #    :type => "msp",
    #    :box => "hbr_ubuntu1604_img",
    #    :flavor => "j1.small",
    #    :netid =>  "d085327f-2cea-4e14-8784-764ee72b92f4",
    #    :netadd => "192.168.1.13",
    #    :privkeyfile => "~/.ssh/openstack_cloudlab_bcom.key"
    #}
]

# data structs for creating the config file in ~/.ssh
ssh_config = []
ssh_entry = { :hostname => "", :username => "" , :ipadd => "", :keyfile => "" }

# initialization scripts
$setSSHconfig = <<-SCRIPT
    echo "-------------------------------------------"
    echo "allNodes script started"
    # setup ~/.ssh/config file at all the nodes to allow connection among them. 
    # (after deployment only the floating IP of the first vm is required to connect)
    echo "Setting ~/.ssh/config file"
    mv /home/ubuntu/hyperledger_ws/config_files/ssh_config_template /home/ubuntu/.ssh/config
    mv /home/ubuntu/hyperledger_ws/install/openstack_cloudlab_bcom.key /home/ubuntu/.ssh/openstack_cloudlab_bcom.key
    chown ubuntu:ubuntu /home/ubuntu/.ssh/config /home/ubuntu/.ssh/openstack_cloudlab_bcom.key
    echo "-------------------------------------------"
SCRIPT

$installDocker = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Installing Docker at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_01_docker.sh'
    echo "-------------------------------------------"
SCRIPT

$installprereqs = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Installing FABRIC prereqs at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_02_prereqs.sh'
    echo "-------------------------------------------"
SCRIPT

$checkprereqs = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Checking FABRIC prereqs at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/check_prereqs.sh'
    echo "-------------------------------------------"
SCRIPT

$bootstrapBinaries = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Bootstraping Fabric binaries at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_03_bootstrap.sh'
    echo "-------------------------------------------"
SCRIPT

$installMSPserver = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Installing CA (client/server) at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/install/install_04_ca_server.sh'
    echo "-------------------------------------------"
SCRIPT

$prepareOrderer = <<-SCRIPT
    echo "-------------------------------------------"
    echo "Preparing Orderer node at node `hostname`"
    sudo -u ubuntu bash -c 'sh /home/ubuntu/hyperledger_ws/setup_scripts/prepare_orderer.sh'
    echo "-------------------------------------------"
SCRIPT


#vagrant config
Vagrant.configure("2") do |config|

    config.ssh.username = "ubuntu"
    config.ssh.private_key_path = '/home/rheverson/.ssh/openstack_cloudlab_bcom.key'

    config.vm.provider :openstack do |os|
        os.openstack_auth_url = 'http://10.50.0.103:5000/v2.0'
        os.username = 'rheverson'
        os.password = '1234'
        os.tenant_name = 'hbr_test'
        os.security_groups = ['default']
        os.availability_zone = 'nova'
        os.region = 'regionOne'  
        os.keypair_name = 'openstack_cloudlab_bcom'
        
    end

    cluster.each do |opts|
        config.vm.define opts[:name] do |node| 
            node.vm.provider :openstack do |os, override|
                os.server_name = opts[:name]
                os.image = opts[:box]
                os.flavor = opts[:flavor]
                os.networks = [{ id: opts[:netid], address: opts[:netadd] }]
                os.floating_ip_pool = 'ext_net'
                
                override.vm.synced_folder '.', '/vagrant', disabled: true  # this share is created by default. Specify the synchronization method between the host and the remote VM. Default value is "rsync". If your OpenStack image does not include rsync, you must set to "none".
                override.vm.synced_folder './shared', '/home/ubuntu/hyperledger_ws/', type: 'rsync'  #   rsync and none as types present some bugs.
                # note that: the os.user_data script will run before the inline script below
                os.user_data = """#!/bin/bash
                    echo '127.0.0.1 #{opts[:name]}' | tee -a /etc/hosts
                    echo 'nameserver 8.8.8.8'       | tee -a /etc/resolv.conf
                """
            end
            
            # for all:
            node.vm.provision "shell", inline: $setSSHconfig
            node.vm.provision "shell", inline: $installprereqs
            node.vm.provision "shell", inline: $checkprereqs
            node.vm.provision "shell", inline: $bootstrapBinaries
            
            # for msp server only
            if opts[:type] == "caserver"
                node.vm.provision "shell", inline: $installMSPserver
            end

            if opts[:type] == "orderer"
                node.vm.provision "shell", inline: $prepareOrderer
            end
        end

        # Genenrate a shh config file with the information from each host
        # the idea is to have all hostnames entries in the ~/.ssh/config
        # and share the config with all the hosts
        # this will allow to remove all the floating IPs allocated to each host by the openstack plugin (default behavior)
	# allowing to consume less IPs while the machines are UP and RUNNING 
        new_ssh_entry = Hash.new()
        new_ssh_entry[:hostname] = opts[:name]
        new_ssh_entry[:username] = opts[:username]
        new_ssh_entry[:ipadd] = opts[:netadd]
        new_ssh_entry[:keyfile] = opts[:privkeyfile]
        ssh_config.push << new_ssh_entry
        
    end
    # Create a ssh config template file in the vagrant host machine to be shared with VMs with the collected information above
    File.open("./shared/config_files/ssh_config_template", "w+") do |f|
        ssh_config.each { |element| f.puts("Host " + element[:hostname].to_s, "     User " + element[:username].to_s, "     Hostname " + element[:ipadd].to_s, "     IdentityFile " + element[:keyfile].to_s) }
    
    end
end 