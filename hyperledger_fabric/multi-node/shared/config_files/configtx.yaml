# -Ref: https://hyperledger-fabric.readthedocs.io/en/release-1.4/commands/configtxgen.html
#      https://github.com/hyperledger/fabric/blob/release-1.4/sampleconfig/configtx.yaml
#  The configtxgen toolâ€™s output is largely controlled by the content of configtx.yaml. 
#  This file is searched for at FABRIC_CFG_PATH and must be present for configtxgen to operate.
#
# -NOTES:
#  - Base parts of the configuration are tagged with an anchor like &OrdererDefaults and then 
#   merged into a profile with a reference like <<: *OrdererDefaults. 
#
# -File originally at:  
#  ../../setup/config/multi-org-ca/yaml.0/configtx.yaml 
################################################################################


################################################################################
#
#   SECTION: Capabilities
#   - Defines the capabilities of fabric network. Capabilities Define features 
#   which must be present in a fabric binary for that binary to safely participate 
#   in the fabric network. For instance, if a new MSP type is added, newer binaries
#   might recognize and validate the signatures from this type, while older
#   binaries without this support would be unable to validate those transactions.
#   This could lead to different versions of the fabric binaries
#   having different world states.  Instead, defining a capability for a channel
#   informs those binaries without this capability that they must cease
#   processing transactions until they have been upgraded.
#
################################################################################
Capabilities:
   # Channel capabilities apply to BOTH ORDERERS AND PEERS and must be supported 
   # by both. Set the value of the capability to true to require it.
 Channel: &ChannelCapabilities
   V1_1: true
   # Orderer capabilities apply ONLY TO ORDERERS, and may be safely
   # used with prior release peers. Set the value to true to require it.
 Orderer: &OrdererCapabilities
   V1_1: true
   # Application capabilities apply ONLY TO PEERS network, and may be safely
   # used with prior release orderers. Set the value to true to require it.
 Application: &ApplicationCapabilities
   V1_2: true

################################################################################
#
#   Section: Organizations
#   - This section defines the different organizational identities which will
#   be referenced later in the configuration.
#
################################################################################
Organizations:
 - &Orderer
   Name: Orderer
   ID: OrdererMSP
   #MSPDir: ./crypto-config/ordererOrganizations/acme.com/msp
   #MSPDir: ../../ca/multi-org-ca/client/orderer/msp
   MSPDir: ../ca-client/orderer/orderer/msp
   Policies: &OrdererPolicies
     Readers:
         Type: Signature
         Rule: "OR('OrdererMSP.member')"
     Writers:
         Type: Signature
         Rule: "OR('OrdererMSP.member')"
     Admins:
         Type: Signature
         Rule: "OR('OrdererMSP.admin')"

 - &Bcom
   Name: Bcom
   # ID to load the MSP definition as
   ID: BcomMSP
   # MSPDir: ./crypto-config/peerOrganizations/acme.com/msp
   # MSPDir: ../../ca/multi-org-ca/client/acme/msp
   MSPDir: ../ca-client/bcom/msp
   Policies: &BcomPolicies
     Readers:
         Type: Signature
         Rule: "OR('BcomMSP.member')"
     Writers:
         Type: Signature
         Rule: "OR('BcomMSP.member')"
     Admins:
         Type: Signature
         Rule: "OR('BcomMSP.admin')"
   AnchorPeers:
     # AnchorPeers defines the location of peers which can be used
     # for cross org gossip communication.  Note, this value is only
     # encoded in the genesis block in the Application section context.
     # ex:  Host: peer0.org1
     - Host: peer0  
       Port: 7051
   #OrdererEndpoints:
   #   # OrdererEndpoints is a list of all orderers this org runs which clients
   #   # and peers may to connect to to push transactions and receive blocks respectively.
   #     - "127.0.0.1:7050"

 - &Orange
   Name: Orange
   # ID to load the MSP definition as
   ID: OrangeMSP
   # MSPDir: ./crypto-config/peerOrganizations/acme.com/msp
   # MSPDir: ../../ca/multi-org-ca/client/acme/msp
   MSPDir: ../ca-client/orange/msp
   Policies: &BcomPolicies
     Readers:
         Type: Signature
         Rule: "OR('OrangeMSP.member')"
     Writers:
         Type: Signature
         Rule: "OR('OrangeMSP.member')"
     Admins:
         Type: Signature
         Rule: "OR('OrangeMSP.admin')"
   AnchorPeers:
     # AnchorPeers defines the location of peers which can be used
     # for cross org gossip communication.  Note, this value is only
     # encoded in the genesis block in the Application section context.
     # ex:  Host: peer0.org1
     - Host: peer1  
       Port: 7051
   #OrdererEndpoints:
   #   # OrdererEndpoints is a list of all orderers this org runs which clients
   #   # and peers may to connect to to push transactions and receive blocks respectively.
   #     - "127.0.0.1:7050"

################################################################################
#
#   SECTION: Orderer
#   - This section defines the values to encode into a config transaction or
#   genesis block for orderer related parameters
#
################################################################################
# the '&OrdererDefaults' is an anchor-tag that tags a part of the configuration 
#                  (the orderer section in this case) to be merge later into 
#                  a profile. 
################################################################################
Orderer: &OrdererDefaults
    # Orderer Type: The orderer implementation to start
    # Available types are "solo" and "kafka"
 OrdererType: solo

 Addresses:
   - 192.168.1.13:7050

    # Policies for Orderer
 Policies:
   Readers:
       Type: ImplicitMeta
       Rule: "ANY Readers"
   Writers:
       Type: ImplicitMeta
       Rule: "ANY Writers"
   Admins:
       Type: ImplicitMeta 
       Rule: "MAJORITY Admins"

   # BlockValidation specifies what signatures must be included in the block
   # from the orderer for the peer to validate it.
   BlockValidation:
       Type: ImplicitMeta
       Rule: "ANY Writers"

 # Batch Timeout: The amount of time to wait before creating a batch
 BatchTimeout: 2s

 # Batch Size: Controls the number of messages batched into a block
 BatchSize:
   MaxMessageCount: 10
    # Max Message Count: The maximum number of messages to permit in a batch
   AbsoluteMaxBytes: 98 MB
    # Absolute Max Bytes: The absolute maximum number of bytes allowed for
    # the serialized messages in a batch.
   PreferredMaxBytes: 512 KB
    # Preferred Max Bytes: The preferred maximum number of bytes allowed for
    # the serialized messages in a batch. A message larger than the preferred
     # max bytes will result in a batch larger than preferred max bytes.

 Capabilities:
   <<: *OrdererCapabilities
  #
  #Kafka:
  #      # Brokers: A list of Kafka brokers to which the orderer connects
  #      # NOTE: Use IP:port notation
  #      Brokers:
  #          - 127.0.0.1:9092
  #
  #Organizations:
  #   # Organizations is the list of orgs which are defined as participants on
  #   # the orderer side of the network

################################################################################
#
#   SECTION: Application
#   - This section defines the values to encode into a config transaction or
#   genesis block for application related parameters.
#
################################################################################

Application: &ApplicationDefaults

 ACLs: &ACLsDefault
    # This section provides defaults for policies for various resources
    # in the system. These "resources" could be functions on system chaincodes
    # (e.g., "GetBlockByNumber" on the "qscc" system chaincode) or other resources
    # (e.g.,who can receive Block events). This section does NOT specify the resource's
    # definition or API, but just the ACL policy for it.
    #
    # User's can override these defaults with their own policy mapping by defining the
    # mapping under ACLs in their channel definition
  
   # ACL policy for lscc's "getid" function
   lscc/ChaincodeExists: /Channel/Application/Readers

   # ACL policy for lscc's "getdepspec" function
   lscc/GetDeploymentSpec: /Channel/Application/Readers

   # ACL policy for lscc's "getccdata" function
   lscc/GetChaincodeData: /Channel/Application/Readers

   # ACL Policy for lscc's "getchaincodes" function
   #    lscc/GetInstantiatedChaincodes: /Channel/Application/Readers
   lscc/GetInstantiatedChaincodes: /Channel/Application/StrictAdminPolicy

   #---Query System Chaincode (qscc) function to policy mapping for access control---#

   # ACL policy for qscc's "GetChainInfo" function
   # qscc/GetChainInfo: /Channel/Application/Readers
   qscc/GetChainInfo: /Channel/Application/StrictAdminPolicy

   # ACL policy for qscc's "GetBlockByNumber" function
   qscc/GetBlockByNumber: /Channel/Application/Readers

   # ACL policy for qscc's  "GetBlockByHash" function
   qscc/GetBlockByHash: /Channel/Application/Readers

   # ACL policy for qscc's "GetTransactionByID" function
   qscc/GetTransactionByID: /Channel/Application/Readers

   # ACL policy for qscc's "GetBlockByTxID" function
   qscc/GetBlockByTxID: /Channel/Application/Readers

   #---Configuration System Chaincode (cscc) function to policy mapping for access control---#

   # ACL policy for cscc's "GetConfigBlock" function
   cscc/GetConfigBlock: /Channel/Application/Readers

   # ACL policy for cscc's "GetConfigTree" function
   cscc/GetConfigTree: /Channel/Application/Readers

   # ACL policy for cscc's "SimulateConfigTreeUpdate" function
   cscc/SimulateConfigTreeUpdate: /Channel/Application/Readers

   #---Miscellanesous peer function to policy mapping for access control---#

   # ACL policy for invoking chaincodes on peer
   peer/Propose: /Channel/Application/Writers

   # ACL policy for chaincode to chaincode invocation
   peer/ChaincodeToChaincode: /Channel/Application/Readers

   #---Events resource to policy mapping for access control###---#

   # ACL policy for sending block events
   event/Block: /Channel/Application/Readers

   # ACL policy for sending filtered block events
   event/FilteredBlock: /Channel/Application/Readers

    # Default Policies define the set of policies at this level of the config tree
    # For Application policies, their canonical path is
    # /Channel/Application/<PolicyName>
 Policies: &ApplicationDefaultPolicies
   Readers:
       Type: ImplicitMeta
       Rule: "ANY Readers"
   Writers:
       Type: ImplicitMeta
       Rule: "ANY Writers"
   Admins:
       Type: ImplicitMeta
       Rule: "MAJORITY Admins"

   StrictAdminPolicy:
       Type: ImplicitMeta
       Rule: "ANY Admins"

   # Organizations lists the orgs participating on the application side of the network.    
 Organizations:

   # Capabilities describes the application level capabilities, see the
   # dedicated Capabilities section elsewhere in this file for a full
   # description
 Capabilities:
   <<: *ApplicationCapabilities

################################################################################
#
#   SECTION: Channel 
#   -  This section defines the values to encode into a config transaction or
#   genesis block for channel related parameters.
#
################################################################################
Channel: &ChannelDefaults
 Policies:
     # Who may invoke the 'Deliver' API
   Readers:
       Type: ImplicitMeta
       Rule: "ANY Readers"
     # Who may invoke the 'Broadcast' API
   Writers:
       Type: ImplicitMeta
       Rule: "ANY Writers"
     # By default, who may modify elements at this config level
   Admins:
       Type: ImplicitMeta
       Rule: "MAJORITY Admins"
    
 Capabilities:
    # Capabilities describes the channel level capabilities, see the
    # dedicated Capabilities section elsewhere in this file for a full
    # description

################################################################################
#
#   SECTION: Profiles
#   - Different configuration profiles may be encoded here to be specified 
#     as parameters to the configtxgen tool.
#     Profiles are a way to express multiple similar configurations in a single 
#     file. For instance, one profile might define a channel with 3 orgs, and 
#     another might define one with 4 orgs.
#
################################################################################

Profiles:

 MyOrdererGenesisProfile:
     <<: *ChannelDefaults
     Orderer:
         <<: *OrdererDefaults
         Organizations:
             - <<: *Orderer

     Application:
           <<: *ApplicationDefaults

           Organizations:
               - <<: *Orderer
               #- <<: *Bcom
               #- <<: *Orange              
      # Orderers also maintain the list of organizations that are allowed to create channels. 
      # This list of organizations is known as the â€œconsortium"
     Consortiums:
       MyConsortium:
           Organizations:
                 #- <<: *Bcom
                 #- <<: *Orange                              
                
 MyChannelProfile:
   <<: *ChannelDefaults
   Consortium: MyConsortium
      
   Application:
       <<: *ApplicationDefaults
      
       Organizations:
           - <<: *Bcom
           - <<: *Orange 